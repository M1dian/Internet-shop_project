"""
Django management command to initialize test data.
"""
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from app.products.models import Category, Product
from decimal import Decimal

User = get_user_model()


class Command(BaseCommand):
    """Django command to initialize test data"""

    def handle(self, *args, **options):
        self.stdout.write('Initializing test data...')
        
        # Create test categories
        electronics, _ = Category.objects.get_or_create(
            name='–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
            defaults={'description': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –≥–∞–¥–∂–µ—Ç—ã'}
        )
        
        books, _ = Category.objects.get_or_create(
            name='–ö–Ω–∏–≥–∏',
            defaults={'description': '–ö–Ω–∏–≥–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤'}
        )
        
        clothing, _ = Category.objects.get_or_create(
            name='–û–¥–µ–∂–¥–∞',
            defaults={'description': '–ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞'}
        )
        
        self.stdout.write('‚úÖ Categories created')
        
        # Create test products
        products_data = [
            {
                'name': 'iPhone 15 Pro',
                'description': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å –æ—Ç–ª–∏—á–Ω–æ–π –∫–∞–º–µ—Ä–æ–π',
                'price': Decimal('89999.99'),
                'stock_quantity': 50,
                'category': electronics
            },
            {
                'name': 'MacBook Air M2',
                'description': '–õ–µ–≥–∫–∏–π –∏ –º–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫',
                'price': Decimal('129999.99'),
                'stock_quantity': 25,
                'category': electronics
            },
            {
                'name': '–í–æ–π–Ω–∞ –∏ –º–∏—Ä',
                'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ',
                'price': Decimal('599.99'),
                'stock_quantity': 100,
                'category': books
            },
            {
                'name': '–î—é–Ω–∞',
                'description': '–ù–∞—É—á–Ω–æ-—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω –§—Ä—ç–Ω–∫–∞ –ì–µ—Ä–±–µ—Ä—Ç–∞',
                'price': Decimal('799.99'),
                'stock_quantity': 75,
                'category': books
            },
            {
                'name': '–î–∂–∏–Ω—Å—ã Levi\'s',
                'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–∞',
                'price': Decimal('3999.99'),
                'stock_quantity': 200,
                'category': clothing
            },
            {
                'name': '–§—É—Ç–±–æ–ª–∫–∞ Nike',
                'description': '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –∏–∑ –¥—ã—à–∞—â–µ–π —Ç–∫–∞–Ω–∏',
                'price': Decimal('1999.99'),
                'stock_quantity': 150,
                'category': clothing
            }
        ]
        
        for product_data in products_data:
            Product.objects.get_or_create(
                name=product_data['name'],
                defaults=product_data
            )
        
        self.stdout.write('‚úÖ Products created')
        
        # Create test user
        test_user, created = User.objects.get_or_create(
            username='testuser',
            defaults={
                'email': 'test@example.com',
                'first_name': '–¢–µ—Å—Ç',
                'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            }
        )
        
        if created:
            test_user.set_password('testpass123')
            test_user.save()
            self.stdout.write('‚úÖ Test user created')
        else:
            self.stdout.write('‚ÑπÔ∏è  Test user already exists')
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Test data initialization completed!'))
        self.stdout.write('üë§ Test user: testuser / testpass123')
        self.stdout.write('üëë Admin user: admin / admin123') 